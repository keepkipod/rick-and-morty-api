name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and load Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: rick-and-morty-api:latest

    - name: Create Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: "test-cluster"
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP

    - name: Load Docker image into Kind cluster
      run: kind load docker-image rick-and-morty-api:latest --name test-cluster

    - name: Install Ingress NGINX
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

    - name: Deploy to Kind
      run: |
        helm upgrade --install rick-and-morty-api ./helm --create-namespace --namespace rick-and-morty
        kubectl wait --for=condition=available --timeout=300s deployment/rick-and-morty-api-deployment -n rick-and-morty

    - name: Run tests
      run: |
        # Wait for the Ingress to be ready
        echo "Waiting for Ingress to be ready..."
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=90s

        # Test the healthcheck endpoint
        HEALTHCHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/healthcheck)
        if [ "$HEALTHCHECK_RESPONSE" = "200" ]; then
          echo "Healthcheck passed"
        else
          echo "Healthcheck failed with status code: $HEALTHCHECK_RESPONSE"
          exit 1
        fi

        # Test the characters endpoint
        CHARACTERS_RESPONSE=$(curl -s http://localhost/api/characters)
        if [ -n "$CHARACTERS_RESPONSE" ]; then
          echo "Characters endpoint returned data"
        else
          echo "Characters endpoint failed to return data"
          exit 1
        fi