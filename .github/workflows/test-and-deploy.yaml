name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and load Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: rick-and-morty-api:latest

    - name: Create Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: "test-cluster"
        config: kind.yaml

    - name: Load Docker image into Kind cluster
      run: kind load docker-image rick-and-morty-api:latest --name test-cluster

    - name: Install Ingress NGINX
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl rollout status deployment --namespace ingress-nginx --timeout=3m
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

    - name: Deploy to Kind
      run: |
        helm upgrade --install rick-and-morty-api ./helm --create-namespace --namespace rick-and-morty
        kubectl wait --for=condition=available --timeout=300s deployment/rick-and-morty-api-deployment -n rick-and-morty
        kubectl rollout status deployment --namespace rick-and-morty --timeout=3m

    - name: Run tests
      run: |
        kubectl rollout status deployment --namespace rick-and-morty --timeout=3m
        echo "Waiting for API to become responsive..."
        timeout=90
        start_time=$(date +%s)
        while true; do
          HEALTHCHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/api/healthcheck)
          if [ "$HEALTHCHECK_RESPONSE" = "200" ]; then
            echo "Healthcheck passed"
            break
          else
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout waiting for API to become responsive"
              echo "Last healthcheck status code: $HEALTHCHECK_RESPONSE"
              exit 1
            fi
            echo "Healthcheck failed with status code: $HEALTHCHECK_RESPONSE. Retrying..."
            sleep 5
          fi
        done

        # Test the characters endpoint
        CHARACTERS_RESPONSE=$(curl -s http://127.0.0.1/api/characters)
        if [ -n "$CHARACTERS_RESPONSE" ]; then
          echo "Characters endpoint returned data"
          
          # Validate JSON integrity
          if echo "$CHARACTERS_RESPONSE" | jq empty; then
            echo "JSON is valid and well-formed"
          else
            echo "Error: Invalid JSON returned"
            exit 1
          fi
          
          # Validate JSON structure
          EXPECTED_KEYS='["name", "location", "image"]'
          MISSING_KEYS=$(echo "$CHARACTERS_RESPONSE" | jq -r --argjson exp "$EXPECTED_KEYS" '.[0] | keys as $k | $exp - ($k - $exp)')
          if [ "$MISSING_KEYS" = "[]" ]; then
            echo "JSON structure is correct (all expected keys are present)"
          else
            echo "Error: Missing expected keys in JSON structure"
            echo "Missing keys: $MISSING_KEYS"
            exit 1
          fi
          
          # Parse the JSON response
          CHAR_COUNT=$(echo $CHARACTERS_RESPONSE | jq '. | length')
          echo "Number of characters returned: $CHAR_COUNT"
          
          # Check if the response contains the expected fields
          FIRST_CHAR=$(echo $CHARACTERS_RESPONSE | jq '.[0]')
          if echo "$FIRST_CHAR" | jq -e '.name and .location and .image' > /dev/null; then
            echo "Response contains expected fields (name, location, image)"
          else
            echo "Error: Response is missing expected fields"
            echo "Response structure:"
            echo "$FIRST_CHAR" | jq '.'
            exit 1
          fi
          
          # Validate data types
          NAME_TYPE=$(echo $FIRST_CHAR | jq -r 'typeof .name')
          LOCATION_TYPE=$(echo $FIRST_CHAR | jq -r 'typeof .location')
          IMAGE_TYPE=$(echo $FIRST_CHAR | jq -r 'typeof .image')
          
          if [ "$NAME_TYPE" = "string" ] && [ "$LOCATION_TYPE" = "string" ] && [ "$IMAGE_TYPE" = "string" ]; then
            echo "Data types are correct"
          else
            echo "Error: Incorrect data types"
            echo "Name type: $NAME_TYPE"
            echo "Location type: $LOCATION_TYPE"
            echo "Image type: $IMAGE_TYPE"
            exit 1
          fi
        else
          echo "Characters endpoint failed to return data"
          exit 1
        fi

    - name: Debug deployment
      if: failure()
      run: |
        echo "Checking pods:"
        kubectl get pods -n rick-and-morty
        echo "Checking services:"
        kubectl get services -n rick-and-morty
        echo "Checking ingress:"
        kubectl get ingress -n rick-and-morty
        echo "Checking ingress controller:"
        kubectl get pods -n ingress-nginx
        echo "Checking for IP address:"
        kubectl get service rick-and-morty-api-service -n rick-and-morty -o jsonpath='{.spec.clusterIP}'
        echo "Checking logs of the API pod:"
        kubectl logs -n rick-and-morty -l app=rick-and-morty-api
        echo "Describing the ingress:"
        kubectl describe ingress -n rick-and-morty